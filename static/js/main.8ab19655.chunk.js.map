{"version":3,"sources":["GradientGenie.jsx","index.js"],"names":["Container","styled","div","GenieContainer","Input","input","ResultContainer","Text","span","ResultText","displayName","GradientGenie","props","handleChange","e","setState","inputMediaURL","target","value","state","url","img","Image","src","onload","canvas","document","createElement","ctx","getContext","width","naturalWidth","height","naturalHeight","drawImage","data","getImageData","r","g","b","i","l","length","rgb","Math","floor","rgbString","hexString","toString","slice","toUpperCase","h","s","max","min","d","gradient","resultArea","querySelector","resultAreaText","style","background","innerHTML","type","name","onBlur","this","backgroundColour","getAverageColourFromURL","className","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8ab19655.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nconst GenieContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin: 25px;\n\tborder-radius: 250px;\n\theight: 500px;\n\twidth: 500px;\n`;\n\nconst Input = styled.input`\n\tdisplay: flex;\n\tmargin: 12px;\n`;\n\nconst ResultContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tborder-radius: 250px;\n\theight: 500px;\n\twidth: 500px;\n`;\n\nconst Text = styled.span`\n\tmargin: 12px;\n\tline-spacing: 1px;\n\tfont-size: 24px;\n\tfont-family: courier;\n`;\n\nconst ResultText = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tborder-radius: 250px;\n\theight: 500px;\n\twidth: 500px;\n\tline-spacing: 1px;\n\tfont-size: 16px;\n`;\n\nContainer.displayName = \"Container\";\nGenieContainer.displayName = \"GenieContainer\";\nInput.displayName = \"Input\";\nResultContainer.displayName = \"Result\";\nResultText.displayName = \"ResultText\";\n\nclass GradientGenie extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputMediaURL: \"\"\n\t\t};\n\t}\n\t// Consumes a URL (for now just an image), calculates its average RGB, hex, and HSL value,\n\t// and displays a pretty gradient genie graphic. TODO: use proxy to get around cross-origin\n\t// errors, video support, error handling, style input box, decide on react event handling for inputs, allow user interactivity\n\tgetAverageColourFromURL(url) {\n\t\t// construct a new image element\n\t\tlet img = new Image();\n\t\timg.src = url;\n\t\timg.onload = function() {\n\t\t\t// use HTML5 canvas to draw the media\n\t\t\tconst canvas = document.createElement(\"canvas\");\n\t\t\tconst ctx = canvas.getContext(\"2d\");\n\t\t\tconst width = (canvas.width = img.naturalWidth);\n\t\t\tconst height = (canvas.height = img.naturalHeight);\n\n\t\t\tctx.drawImage(img, 0, 0);\n\n\t\t\tlet imageData = ctx.getImageData(0, 0, width, height);\n\t\t\tlet data = imageData.data;\n\t\t\tlet r = 0;\n\t\t\tlet g = 0;\n\t\t\tlet b = 0;\n\n\t\t\t// Calculate the RGB values for the media, stepping by 4 pixels at a time\n\t\t\tfor (let i = 0, l = data.length; i < l; i += 4) {\n\t\t\t\tr += data[i];\n\t\t\t\tg += data[i + 1];\n\t\t\t\tb += data[i + 2];\n\t\t\t}\n\n\t\t\tr = Math.floor(r / (data.length / 4));\n\t\t\tg = Math.floor(g / (data.length / 4));\n\t\t\tb = Math.floor(b / (data.length / 4));\n\n\t\t\tconst rgb = { r: r, g: g, b: b };\n\n\t\t\t// Convert RGB values to usable string\n\t\t\tconst rgbString = `rgb(${rgb.r}, ${rgb.b},${rgb.g})`;\n\n\t\t\t// Convert RGB values to usable hex string\n\t\t\tconst hexString = (\n\t\t\t\t\"#\" +\n\t\t\t\t(\"0\" + rgb.r.toString(16)).slice(-2) +\n\t\t\t\t(\"0\" + rgb.g.toString(16)).slice(-2) +\n\t\t\t\t(\"0\" + rgb.b.toString(16)).slice(-2)\n\t\t\t).toUpperCase();\n\n\t\t\t// Convert RGB values to usable HSL string\n\t\t\tr /= 255;\n\t\t\tg /= 255;\n\t\t\tb /= 255;\n\t\t\tlet max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b);\n\t\t\tlet h,\n\t\t\t\ts,\n\t\t\t\tl = (max + min) / 2;\n\n\t\t\tif (max === min) {\n\t\t\t\th = s = 0; // achromatic\n\t\t\t} else {\n\t\t\t\tlet d = max - min;\n\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\th = (g - b) / d + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase g:\n\t\t\t\t\t\th = (b - r) / d + 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase b:\n\t\t\t\t\t\th = (r - g) / d + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\th /= 6;\n\t\t\t}\n\t\t\tconst hslString = `hsl(${h}, ${s}, ${l})`;\n\n\t\t\t// Create a gradient to display from the HSL values\n\t\t\tconst gradient = `linear-gradient(${hexString}, #fff)`;\n\n\t\t\t// Find the elements in the DOM and apply styles TODO: pass down via props,\n\t\t\t// add in options for user input (type of colour value, gradient options, HSL/HSLa options)\n\t\t\tconst resultArea = document.querySelector(\".resultContainer\");\n\t\t\tconst resultAreaText = document.querySelector(\".resultTextValue\");\n\t\t\tresultArea.style.background = gradient;\n\t\t\tresultAreaText.innerHTML = `in HEX: ${hexString}, in RGB: ${rgbString}, gradient:${gradient}`;\n\t\t};\n\t}\n\n\thandleChange = e => {\n\t\tthis.setState({\n\t\t\tinputMediaURL: e.target.value\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<GenieContainer>\n\t\t\t\t\t<Input type=\"text\" name=\"mediaURL\" onBlur={this.handleChange} />\n\t\t\t\t\t<ResultContainer\n\t\t\t\t\t\tbackgroundColour={this.getAverageColourFromURL(\n\t\t\t\t\t\t\tthis.state.inputMediaURL\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tclassName=\"resultContainer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ResultText>\n\t\t\t\t\t\t\t<Text>The average colour of the media at this URL is: </Text>\n\t\t\t\t\t\t\t<Text className=\"resultTextValue\"></Text>\n\t\t\t\t\t\t</ResultText>\n\t\t\t\t\t</ResultContainer>\n\t\t\t\t</GenieContainer>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default GradientGenie;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GradientGenie from \"./GradientGenie\";\n\nReactDOM.render(<GradientGenie />, document.getElementById(\"root\"));\n"],"sourceRoot":""}